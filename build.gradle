apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'com.tenable'
version = '1.4.0'

description = """Tenable.io SDK offers a scalable and safe way to integrate with the Tenable.io platform."""

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version:'4.1.2'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'[2.0.0,)'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'[2.0.0,)'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'[2.0.0,)'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.23'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.23'
}

allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

ext.canPublish = hasProperty('deployMavenUsername') && hasProperty('deployMavenPassword')

signing {
    required { canPublish }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)

            artifactId = 'api-sdk-core'
            groupId = group
            version = version

            from components.java

            artifact sourcesJar
            artifact javadocJar

            if (canPublish) {
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
    repositories {
         maven {
             url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
             if (canPublish) {
                 credentials {
                     username = deployMavenUsername
                     password = deployMavenPassword
                 }
             }
         }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Tenable.io SDK offers a scalable and safe way to integrate with the Tenable.io platform.'
            name 'Tenable.io Java SDK'
            url 'https://github.com/tenable/Tenable.io-SDK-for-Java'
            organization {
                name 'Tenable'
                url 'https://www.tenable.com/'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/tenable/Tenable.io-SDK-for-Java/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                }
            }
            scm {
                url 'https://github.com/tenable/Tenable.io-SDK-for-Java'
                connection 'scm:git:git://github.com/tenable/Tenable.io-SDK-for-Java.git'
                developerConnection 'scm:git:ssh://git@github.com:tenable/Tenable.io-SDK-for-Java.git'
            }
            developers {
                developer {
                    name 'Tenable'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

// Configure this block to run the tests
test {
    // add a gradle.properties file in the form:
  
    // systemProp.policyTemplateName=basic
    // systemProp.scanAltTargets=target2.tenable.com
    // systemProp.scanTemplateName=basic
    // systemProp.scanTextTargets=target1.tenable.com
    // systemProp.tenableIoAccessKey=********
    // systemProp.tenableIoHost=develop.cloud.tenable.com
    // systemProp.tenableIoSecretKey=********
    // systemProp.userDomainName=tenable.dev
    // systemProp.registryHost=registry.cloud.tenable.com
    // systemProp.registryProtocol=https
 
    // Access key and secret
    jvmArgs "-DtenableIoAccessKey=" + System.properties['tenableIoAccessKey']
    jvmArgs "-DtenableIoSecretKey=" + System.properties['tenableIoSecretKey']
    // A valid domain name for username
    jvmArgs "-DuserDomainName=" + System.properties['userDomainName']
    // Comma-separated list of host targets to create a scan with. (Warning: do not scan targets that you're not authorized to.)
    jvmArgs "-DscanTextTargets=" + System.properties['scanTextTargets']
    // Comma-separated list of host alternative targets to launch a scan with. (Warning: do not scan targets that you're not authorized to.)
    jvmArgs "-DscanAltTargets=" + System.properties['scanAltTargets']
    // Name of template to create a scan with.
    jvmArgs "-DscanTemplateName=" + System.properties['scanTemplateName']
    // Name of template to create a policy with.
    jvmArgs "-DpolicyTemplateName=" + System.properties['policyTemplateName']
    // Name of tenable io host to run tests
    jvmArgs "-DtenableIoHost=" + System.properties['tenableIoHost']
    // Name of registry to be used for containers
    jvmArgs "-DregistryHost=" + System.properties['registryHost']
    // Name of registry protocol be used for containers
    jvmArgs "-DregistryProtocol=" + System.properties['registryProtocol']
 
    exclude '**/containerSecurity/**'   
    exclude '**/examples/**'

    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
